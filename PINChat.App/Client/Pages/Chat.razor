@page "/Chat"
@attribute [Authorize]

@inject ILoggedInUserModel LoggedInUser
@inject IMessageEndpoint MessageEndpoint
@inject NavigationManager NavManager
@inject ICryptoService Crypto


<div class="view-wrapper">
    <div class="chat-view">
        <aside class="chat-sidebar">
            <div class="user-data-container">
                @* LoggedInUser Data *@
            
                <div class="d-flex justify-content-between">
                    <img class="img-avatar" src="resources/images/user-avatar.png" alt="User Avatar">
                    
                    <div class="d-flex">
                        <NavLink class="nav-link" href="/settings/user">
                            <image class="img-link" src="resources/images/Settings.png"></image>
                        </NavLink>
                        <NavLink class="nav-link" href="logout">
                            <image class="img-link" src="resources/images/Logout.png"></image>
                        </NavLink>
                    </div>
                </div>
                <h2>@LoggedInUser.DisplayName</h2>
                <h3>@LoggedInUser.FirstName @LoggedInUser.LastName</h3>
            </div>  
            
            <div class="friends-groups-container">
                
                <!-- Friends and Groups go here -->
                <h3>Kontakti</h3>
                <ul>
                    @foreach (var target in LoggedInUser.Contacts)
                    {
                        <li class="@ContactIsSelected(target.Id!)" @onclick="() => SetMessageTarget(target)">
                            @target.FirstName @target.LastName
                        </li>
                    }
                </ul>

                <h3>Grupe</h3>
                <ul>
                    @foreach (var target in LoggedInUser.Groups)
                    {
                        <li class="@ContactIsSelected(target.Id!)" @onclick="() => SetMessageTarget(target)">
                            @target.Name
                        </li>
                    }
                </ul>
            </div>
        </aside>
        
        <main class="chat-container">
            @if (!string.IsNullOrEmpty(_msgTarget.Id) && _isMessageLoading)
            {
                <div class="loading-wrapper">
                    <div class="spinnerContainer">
                        <div class="spinner"></div>
                    </div>
                </div>
            }
            else
            {
                <div class="chat-output" @ref="_chatOutput" @onscroll="() => SetScrollState(false)">
                    @foreach (var message in _messages)
                    {
                        <div class="@($"{(message.IsOrigin ? "right" : "left")}-aligned message-wrapper " +
                                      $"{(message == _messages.Last() && _isAutoScrollEnabled ? "scroll-snap-start" : "")}")">
                            <div class="message-container">
                                <div class="@($"{(message.IsOrigin ? "right" : "left")}-aligned avatar-container ")">
                                    <img src="resources/images/user-avatar.png" alt="User Avatar">
                                </div>
                                
                                <div class="@($"{(message.IsOrigin ? "right" : "left")}-aligned content-container ")">
                                    @if (!message.IsOrigin)
                                    {
                                        <p class="sender">@LoggedInUser.Contacts.FirstOrDefault(x => x.Id == message.SourceId)!.FullName</p>
                                    }
                                    <p class="date">@message.CreatedDate.ToLocalTime().ToString("dd.MM.yyyy HH:mm")</p>
                                    <p class="message">@message.Content</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }

            <div class="chat-input">
                <input type="text" Placeholder="Nova poruka" @bind="_messageContent" @onkeydown="@(HandleKeyDown)">
                <button class="btn-accent" @onclick="SendMessage">Pošalji</button>
            </div>
        </main>
    </div>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    HubConnection? _hubConnection;
    
    private bool _isAutoScrollEnabled;
    private ElementReference? _chatOutput;
    
    private List<MessageModel> _messages = new();
    private string? _messageContent;
    private TargetModel _msgTarget = new();
    private bool _isMessageLoading;
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;

        if (authState.User.Identity!.IsAuthenticated)
        {
            ConnectToHub();
        }
    }
    private async void ConnectToHub()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/chathub"), options =>
            {
                options.AccessTokenProvider = () => Task.FromResult("YourAccessToken")!;
                options.Transports = HttpTransportType.WebSockets;
            })
            .WithAutomaticReconnect(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(5) })
            .Build();

        _hubConnection.On<string, MessageDtoModel>("ReceiveMessage", OnMessageReceived);
        await _hubConnection.StartAsync();
        List<string> groups = LoggedInUser.Groups.Select(x => x.Id).ToList()!;
        await _hubConnection.InvokeAsync("Login", LoggedInUser.Id!, groups);
    }

    private async Task OnMessageReceived(string action, MessageDtoModel message)
    {
        var msg = new MessageModel()
        {
            CreatedDate = message.CreatedDate,
            TargetId = message.TargetId,
            SourceId = message.SourceId,
            Content = await Crypto.DecryptAsync(message.Content),
            Image = message.Image,
            IsOrigin = LoggedInUser.Id == message.SourceId
        };

       
        switch (action)
        {
            case "addSingle":
            {        
                if (msg.SourceId != _msgTarget.Id) return;

                _messages.Add(msg);

                SetScrollState(true);
                StateHasChanged();   
                break;
            }             
            case "addGroup":
            {
                if (msg.TargetId != _msgTarget.Id) return;

                _messages.Add(msg);

                SetScrollState(true);
                StateHasChanged();   
                break;
            }   
        }
    }

    private async void SetMessageTarget(TargetModel target)
    {
        try
        {
            _msgTarget = target;
            _isMessageLoading = true;
            StateHasChanged();
            
            _messages.Clear();
            
            MessageQueryModel msgModel = new()
            {
                SourceId = LoggedInUser.Id,
                TargetId = target.Id
            };
            
            if (_msgTarget.GetType() == typeof(UserModel))
            {
                _messages = await MessageEndpoint.GetByUserId(msgModel);
            }
            else if (_msgTarget.GetType() == typeof(GroupModel))
            {
                _messages = await MessageEndpoint.GetByGroupId(msgModel);
            }
            
            foreach (var msg in _messages)
            {
                msg.IsOrigin = LoggedInUser.Id == msg.SourceId;
                msg.Content = await Crypto.DecryptAsync(msg.Content);
            }
            
            SetScrollState(true);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        finally
        {
            _isMessageLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key is "Enter")
        {
            await Task.Yield();
            
            if (!string.IsNullOrEmpty(_messageContent))
            {
                await SendMessage();
            }
        }
    }
    
    private async Task SendMessage()
    {
        if (string.IsNullOrEmpty(_msgTarget.Id))
        {
            return;
        }
        
        try
        {
            var displayMessage = new MessageModel()
            {
                CreatedDate = DateTime.UtcNow,
                TargetId = _msgTarget.Id,
                SourceId = LoggedInUser.Id,
                Content = _messageContent,
                Image = "",
                IsOrigin = true
            };
        
            _messages.Add(displayMessage);

            var dtoMessage = new MessageModel()
            {
                CreatedDate = DateTime.UtcNow,
                TargetId = _msgTarget.Id,
                SourceId = LoggedInUser.Id,
                Content = (await Crypto.EncryptAsync(_messageContent)).Value,
                Image = "",
                IsOrigin = true
            };
            
            // send to chat hub
            if (_msgTarget.GetType() == typeof(UserModel))
            {
                await _hubConnection!.SendAsync("MessageSingle", "addSingle", dtoMessage);
            }
            else if (_msgTarget.GetType() == typeof(GroupModel))
            {
                await _hubConnection!.SendAsync("MessageGroup", "addGroup", dtoMessage);
            }
            
            // save to database
            await MessageEndpoint.CreateNew(dtoMessage);
            
            _messageContent = "";
            SetScrollState(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    
    private string ContactIsSelected(string contactId)
    {
        return _msgTarget.Id == contactId ? "selected" : "";
    }
    
    private void SetScrollState(bool state)
    {
        _isAutoScrollEnabled = state;
    }
}