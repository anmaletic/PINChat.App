@page "/login"

@inject NavigationManager NavManager
@inject IAuthenticationService AuthService
@inject ILoggedInUserModel LoggedInUser
@inject IUserEndpoint UserEndpoint
@inject IRegistrationEndpoint RegistrationEndpoint

<div class="loginView d-flex flex-column align-items-center">
    <div class="row col-xxl-4 col-xl-6 col-lg-6 col-md-7 col-sm-9 col-10 my-auto align-items-center">
        <div>
            <img src="resources/images/Logo.svg" alt="" width="100%">
        </div>
        
        @if(_isRegistering)
        {
            <div>
                <EditForm Model="_registrationModel" OnValidSubmit="RegisterUser">
                    <DataAnnotationsValidator />
                    <div class="editForm-s">
                        <p class="editForm-h">Lozinka mora sadržavati:</p>
                        <p class="editForm-p">* Minimalno 6 znakova</p>
                        <p class="editForm-p">* Velika i mala slova engleske abecede</p>
                        <p class="editForm-p">* Specijalne znakove</p>
                    </div>
                    <div>
                        <label  for="userName">Korisničko ime:</label>
                        <InputText id="userName" class="form-control"  @bind-Value="_registrationModel.UserName"/>
                        <ValidationMessage For="() => _registrationModel.UserName" />
                    </div>
                    <div>
                        <label for="password" class="mt-2">Lozinka:</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="_registrationModel.Password"/>
                        <ValidationMessage For="() => _registrationModel.Password" />
                    </div>
                    <div>
                        <label for="password" class="mt-2">Potvrda lozinke:</label>
                        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="_registrationModel.ConfirmPassword"/>
                        <ValidationMessage For="() => _registrationModel.ConfirmPassword" />
                    </div>                        
                    <div>
                        <button type="submit" class="btn-accent mt-4">Registracija</button>
                    </div>
                    <p style="text-align: center">
                        <a href="" @onclick='() => SetUserState("l")' @onclick:preventDefault >Povratak na prijavu</a>.
                    </p>            
                </EditForm>
            </div>
        }
        else
        {
            <div>
                <EditForm Model="_authModel" OnValidSubmit="LoginUser">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div>
                        <label for="userName">Korisničko ime:</label>
                        <InputText id="userName" class="form-control" @bind-Value="_authModel.UserName"/>
                    </div>
                    <div>
                        <label for="password" class="mt-2">Lozinka:</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="_authModel.Password"/>
                    </div>
                    <div>
                        <button type="submit" class="btn-accent mt-4">Prijava</button>
                    </div>
                    <p style="text-align: center">
                        Ukoliko nemate korisnički račun,
                        <a href="" @onclick='() => SetUserState("r")' @onclick:preventDefault >registrirajte se</a>.
                    </p>
            
                </EditForm>
            </div>
        }
        
        @if (_showAuthenticationError)
        {
            <div class="text-danger">
                * @_authenticationErrorText
            </div>
        }
        @if (_isLoading)
        {
            <div class="spinnerContainer">
                <div class="spinner"></div>
            </div>
        }
    </div>
</div>



@code {
    private readonly RegistrationModel _registrationModel = new();
    private readonly AuthenticationUserModel _authModel = new();
    private bool _showAuthenticationError;
    private string _authenticationErrorText = "";
    private bool _isRegistering;
    private bool _isLoading;


    private void SetUserState(string state)
    {
        switch (state)
        {
            case "r":
                _isRegistering = true;
                _registrationModel.Reset();
                break;
            case "l":
                _isRegistering = false;
                _authModel.Reset();
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(state), state, null);
        }
    }

    // Create new user
    // todo: maybe create RegisterPage for creating new user
    private async Task RegisterUser()
    {
        try
        {
            _isLoading = true;
            
            await RegistrationEndpoint.Register(_registrationModel);
            
            _registrationModel.Reset();
            _isRegistering = false;
        }
        catch (Exception e)
        {
            _authenticationErrorText = e.Message.Replace("\"", "");
            _showAuthenticationError = true;
        }
        finally
        {
            _isLoading = false;
        }
    }

    // Login user
    private async Task LoginUser()
    {
        try
        {
            _isLoading = true;
            _showAuthenticationError = false;

            var result = await AuthService.Login(_authModel);

            if (result is null)
            {
                // user doesnt exist in pinchat.auth
                _authenticationErrorText = "There was an error when trying to log in.";
                _showAuthenticationError = true;
                return;
            }

            _authenticationErrorText = "";
                
            if (string.IsNullOrEmpty(LoggedInUser.DisplayName))
            {
                // if display name is empty, user data doesnt exist in pinchat.data
                // need to fill user datas
                NavManager.NavigateTo("/settings/user");
                return;
            }
            
            // user exists, navigate to chat page
            NavManager.NavigateTo("/Chat");
        }
        catch (Exception e)
        {
            _authenticationErrorText = "Unable to login user.";
            _showAuthenticationError = true;
            Console.WriteLine("Unable to login user.");
        }
        finally
        {
            _isLoading = false;
        }
    }
}

