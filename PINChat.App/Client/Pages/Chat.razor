@page "/Chat"
@attribute [Authorize]

@inject ILoggedInUserModel LoggedInUser
@inject IUserEndpoint UserEndpoint
@inject NavigationManager NavManager

<div class="view-wrapper">
    <div class="chat-view">
        <aside class="chat-sidebar">
            <div class="user-data-container">
                @* LoggedInUser Data *@
            
                <div class="d-flex justify-content-between">
                    <img class="img-avatar" src="resources/images/user-avatar.png" alt="User Avatar">
                    
                    <div class="d-flex">
                        <NavLink class="nav-link" href="/settings/user">
                            <image class="img-link" src="resources/images/Settings.png"></image>
                        </NavLink>
                        <NavLink class="nav-link" href="logout">
                            <image class="img-link" src="resources/images/Logout.png"></image>
                        </NavLink>
                    </div>
                </div>
                <h2>@LoggedInUser.DisplayName</h2>
                <h3>@LoggedInUser.FirstName @LoggedInUser.LastName</h3>
            </div>  
            
            <div class="friends-groups-container">
                <!-- Friends and Groups go here -->
                <h3>Contacts</h3>
                <ul>
                    @foreach (var target in LoggedInUser.Contacts)
                    {
                        <li class="@ContactIsSelected(target.Id!)" @onclick="() => SetMessageTarget(target.Id!)">
                            @target.FirstName @target.LastName
                        </li>
                    }
                </ul>
                
                <h3>Groups</h3>
                <ul>
                   @foreach (var target in LoggedInUser.Groups)
                   {
                       <li class="@ContactIsSelected(target.Id!)" @onclick="() => SetMessageTarget(target.Id!)">
                           @target.Name
                       </li>
                   }
                </ul>
            </div>
        </aside>
        
        <main class="chat-container">
            <div class="chat-output">
                @foreach (var message in _messages)
                {
                    <div class="@($"{(message.IsOrigin ? "right" : "left")}-aligned message-container")">
                        <p class="date">@message.Date.ToLocalTime()</p>
                        <p class="message">@message.Content</p>
                    </div>
                }
            </div>

            <div class="chat-input">
                <input type="text" Placeholder="Nova poruka" @bind="_messageContent" @onkeydown="@(HandleKeyDown)">
                <button class="btn-accent" @onclick="SendMessage" >Pošalji</button>
            </div>
        </main>
    </div>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    
    HubConnection? _hubConnection;

    private string? _messageContent;
    private List<MessageModel> _messages = new();

    private List<UserModel> _users = new();
    private string? _msgTarget = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;

        if (authState.User.Identity!.IsAuthenticated)
        {
            ConnectToHub();
        }
    }

    private async void ConnectToHub()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/chathub"), options =>
            {
                options.AccessTokenProvider = () => Task.FromResult("YourAccessToken")!;
                options.Transports = HttpTransportType.WebSockets;
            })
            .WithAutomaticReconnect(new[] { TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(5) })
            .Build();


        _hubConnection.On<string, MessageDtoModel>("ReceiveMessage", MessageReceived);
        await _hubConnection.StartAsync();
        await _hubConnection.InvokeAsync("Login", LoggedInUser.Id!);
    }

    private void MessageReceived(string action, MessageDtoModel message)
    {

        var msg = new MessageModel(LoggedInUser)
        {
            Date = message.Date,
            Target = message.Target,
            Source = message.Source,
            Content = message.Content,
            Image = message.Image
        };
        
        if (msg.Source == _msgTarget)
        {
            switch (action)
            {
                case "add":
                {
                    _messages.Add(msg);
                    StateHasChanged();   
                    break;
                }   
            }
        }
    }
        
    
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key is "Enter")
        {
            await Task.Yield();
            
            if (!string.IsNullOrEmpty(_messageContent))
            {
                await SendMessage();
            }
        }
    }
    private async Task SendMessage()
    {
        var message = new MessageModel(LoggedInUser)
        {
            Date = DateTime.UtcNow,
            Target = _msgTarget,
            Source = LoggedInUser.Id,
            Content = _messageContent
        };
        
        _messages.Add(message);
        await _hubConnection!.SendAsync("MessageSingle", "add", message);
        
        _messageContent = "";
    }

    private void SetMessageTarget(string target)
    {
        _messages.Clear();
        _msgTarget = target;
    }
    
    // Function to check if a contact is selected
    private string ContactIsSelected(string contactId)
    {
        return _msgTarget == contactId ? "selected" : "";
    }
    
}