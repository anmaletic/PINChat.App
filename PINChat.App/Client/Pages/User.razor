@page "/settings/user"
@attribute [Authorize]

@inject ILoggedInUserModel LoggedInUser
@inject IUserEndpoint UserEndpoint
@inject IGroupEndpoint GroupEndpoint
@inject IJSRuntime JsRuntime
@inject IImageEndpoint ImageEndpoint
@inject NavigationManager NavManager


<div class="view-wrapper">
    <div class="user-view">
        <div class="user-data">
            <div class="top-bar">
                <h3>Korisnički podaci:</h3>
                <NavLink class="nav-link" href="" @onclick="ClosePage">
                    <img src="resources/images/Exit.png" alt="Exit Icon"/>
                </NavLink>
            </div>
            
            <InputFile id="fileInput" accept=".jpg, .jpeg, .png" OnChange="HandleFileChange" style="display: none"/>
            
            <EditForm Model="LoggedInUser" class="editForm" OnValidSubmit="Update">
                <div>
                    <label for="avatarImg" >Slika (max 50KB):</label>
                    <img class="img-avatar-small" id="avatarImg" src="data:image;base64,@Convert.ToBase64String(LoggedInUser.Avatar!)" alt="avatar" @onclick="OpenFileDialog"/>
                </div>
                
                <div>
                    <label for="displayName">Nadimak:</label>
                    <InputText id="displayName" class="form-control" @bind-Value="LoggedInUser.DisplayName"/>
                    <ValidationMessage For="() => LoggedInUser.DisplayName"/>
                </div>

                <div>
                    <label for="firstName">Ime:</label>
                    <InputText id="firstName" class="form-control" @bind-Value="LoggedInUser.FirstName"/>
                    <ValidationMessage For="() => LoggedInUser.FirstName"/>
                </div>

                <div>
                    <label for="lastName">Prezime:</label>
                    <InputText id="lastName" class="form-control" @bind-Value="LoggedInUser.LastName"/>
                    <ValidationMessage For="() => LoggedInUser.LastName"/>
                </div>

                <div>
                    <label></label>
                    <button type="submit" class="btn-accent" style="height: 36px">Spremi</button>
                </div>
            </EditForm>
        </div>
        
        <div class="user-contacts">
            <h3 class="mt-2">Kontakti:</h3>
            <div class="contacts-groups-data">
                <div class="saved-data">
                    <ul>
                        @foreach (var item in LoggedInUser.Contacts)
                        {
                            <li class="saved-item-container" @onclick="() => RemoveContact(item)">
                                <div>@item.FullName</div>
                            </li>
                        }
                    </ul>
                </div>
                
                <div class="new-data">
                    <ul class="horizontal-list">
                        @foreach (var item in _contacts)
                        {
                            <li class="new-item-container" @onclick="() => AddContact(item)">
                                <div>@item.FullName</div>
                                <img class="img-avatar-small" style="grid-row: span 2" src="@ImageEndpoint.GetUserImage(new UserModel() { Id = item.Id })" alt="avatar"/>
                                <div>@item.DisplayName</div>
                            </li>
                        }
                    </ul>
                    
                    @if (_isContactsLoading)
                    {
                        <div>
                            <Loading/>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="user-groups">
            <h3 class="mt-2">Grupe:</h3>
            <div class="contacts-groups-data">
                <div class="saved-data">
                    <ul>
                        @foreach (var item in LoggedInUser.Groups)
                        {
                            <li class="saved-item-container" @onclick="() => RemoveGroup(item)">
                                <div>@item.Name</div>
                            </li>
                        }
                    </ul>
                </div>
                
                <div class="new-data">
                    <ul class="horizontal-list">
                        @foreach (var item in _groups)
                        {
                            <li class="new-group-container" @onclick="() => AddGroup(item)">
                                <div>@item.Name</div>
                            </li>
                        }
                    </ul>
                    
                    @if (_isGroupsLoading)
                    {
                        <div>
                            <Loading/>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    
    @if (_isLoading)
    {
        <Loading />
    }
    
    @if (_isModalVisible)
    {
        <ModalDialog Title="Upozorenje" Message="@_dialogMessage" OnButtonClicked="ModalDialogClicked"/>
    }
</div>


@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private string? _dialogMessage = "";
    private bool _isModalVisible;
    private bool _isLoading;
    private bool _isContactsLoading;
    private bool _isGroupsLoading;

    private List<UserModel> _contacts = new(); 
    private List<GroupModel> _groups = new(); 

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;

        if (authState.User.Identity!.IsAuthenticated)
        {
            _ = LoadContactsDataAsync();
            _ = LoadGroupsDataAsync();
        }
    }

    private async Task LoadContactsDataAsync()
    {
        try
        {
            _isContactsLoading = true;
            StateHasChanged();

            await Task.Run(async () =>
            {
                _contacts = await UserEndpoint.GetAll();
                _contacts = _contacts
                    .ExceptBy(LoggedInUser.Contacts.Select(s => s.Id), contact => contact.Id)
                    .ToList();
                _contacts.Remove(_contacts.FirstOrDefault(x => x.Id == LoggedInUser.Id)!);
                _contacts = _contacts.OrderBy(x => x.FullName).ToList();
            });
        }
        finally
        {
            _isContactsLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadGroupsDataAsync()
    {
        try
        {
            await Task.Run( async () =>
            {
                _isGroupsLoading = true;
                StateHasChanged();

                _groups = await GroupEndpoint.GetAll();
                _groups = _groups.ExceptBy(LoggedInUser.Groups.Select(s=> s.Id), group => group.Id)
                    .ToList();
                _groups = _groups.OrderBy(x => x.Name).ToList();
            });
        }
        finally
        {
            _isGroupsLoading = false;
            StateHasChanged();
        }
    }

    private async Task Update()
    {        
        if (string.IsNullOrEmpty(LoggedInUser.DisplayName) ||
                 string.IsNullOrEmpty(LoggedInUser.FirstName) ||
                 string.IsNullOrEmpty(LoggedInUser.LastName))
        {
            _dialogMessage = "Nisu sva polja popunjena!";
            _isModalVisible = true;
        }
        else
        {
            try
            {
                _isLoading = true;
                StateHasChanged();

                await Task.Run(async () =>
                {
                    await UserEndpoint.UpdateUser((LoggedInUser as UserModel)!);
                });
            }
            finally
            {
                _isLoading = false;
                StateHasChanged();
            }
        }
    } 

    private async Task AddContact(UserModel user)
    {
        LoggedInUser.Contacts.Add(user);
        _contacts.Remove(user);
        LoggedInUser.Contacts = LoggedInUser.Contacts.OrderBy(x => x.FullName).ToList();

        await UserEndpoint.AddContact(LoggedInUser.Id!, user.Id!);
    }

    private async Task RemoveContact(UserModel user)
    {
        LoggedInUser.Contacts.Remove(user);
        _contacts.Add(user);
        _contacts = _contacts.OrderBy(x => x.FullName).ToList();

        await UserEndpoint.RemoveContact(LoggedInUser.Id!, user.Id!);
    }

    private async Task AddGroup(GroupModel group)
    {
        group.Contacts.Add((LoggedInUser as UserModel)!);
        LoggedInUser.Groups.Add(group);
        _groups.Remove(group);
        LoggedInUser.Groups = LoggedInUser.Groups.OrderBy(x => x.Name).ToList();
        
        await UserEndpoint.AddGroup(LoggedInUser.Id!, group.Id!);
    }

    private async Task RemoveGroup(GroupModel group)
    {
        group.Contacts.Remove((LoggedInUser as UserModel)!);
        LoggedInUser.Groups.Remove(group);
        _groups.Add(group);
        _groups = _groups.OrderBy(x => x.Name).ToList();

        await UserEndpoint.RemoveGroup(LoggedInUser.Id!, group.Id!);
    }

    private async Task OpenFileDialog()
    {
        await JsRuntime.InvokeVoidAsync("blazorHelpers.triggerClick", "fileInput");
    }
    
    
    
    private IBrowserFile? _selectedFile;

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            _selectedFile = e.GetMultipleFiles().FirstOrDefault();
        
            switch (_selectedFile?.ContentType)
            {
                default:
                    _dialogMessage = "Tip datoteke nije ispravan!";
                    _isModalVisible = true;
                    StateHasChanged();
                    break;
                case "image/jpeg":
                case "image/jpg":
                case "image/png":
                {
                    using var memoryStream = new MemoryStream();
                    await _selectedFile.OpenReadStream(maxAllowedSize: 50*1024).CopyToAsync(memoryStream);
                    var imgBytes = memoryStream.ToArray();

                    LoggedInUser.Avatar = imgBytes;
                    break;
                }
            }
        }
        catch (Exception ex)
        {
            _dialogMessage = "Datoteka je veća od 50KB!";
            _isModalVisible = true;
            StateHasChanged();
        }
    }

    private void ModalDialogClicked()
    {
        _isModalVisible = false;
    }

    private void ClosePage()
    {
        if (string.IsNullOrEmpty(LoggedInUser.DisplayName) ||
            string.IsNullOrEmpty(LoggedInUser.FirstName) ||
            string.IsNullOrEmpty(LoggedInUser.LastName))
        {
            NavManager.NavigateTo("logout");
        }
        else
        {
            NavManager.NavigateTo("/chat");
        }
    }

}